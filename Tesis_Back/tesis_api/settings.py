"""
Django settings for tesis_api project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

import environ
import os
import dj_database_url
import openai


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise environment variables
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

AUTH_USER_MODEL = "usuarios.Usuario"

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'rest_framework',
    'corsheaders',
    'usuarios',
    'rest_framework_simplejwt',
    'causa',
    "drf_spectacular",                
    "drf_spectacular_sidecar",
    "ia", 
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tesis_api.urls'

#Acá se especificarían las urls autorizadas
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8000'
]

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_HEADERS = ['*']
CORS_ALLOW_METHODS = ['GET', 'POST', 'PATCH', 'DELETE', 'OPTIONS', 'PUT']

import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates', 'causa'), os.path.join(BASE_DIR, 'templates', 'usuarios')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tesis_api.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql',
#        'NAME': env('DATABASENAME'),
#        'USER': env('DATABASEUSER'),
#        'PASSWORD': env('DATABASEPASSWORD'),   
#        'HOST': env('DATABASEHOST'),
#        'PORT': env('DATABASEPORT'),
#    }
# }

DATABASES = {"default": env.db("DATABASE_URL")}
DATABASES["default"]["CONN_MAX_AGE"] = 600
# Asegurar SSL en Render
DATABASES["default"].setdefault("OPTIONS", {})
DATABASES["default"]["OPTIONS"]["sslmode"] = "require"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-AR'

TIME_ZONE = 'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",
    ),
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
}

REST_FRAMEWORK["DEFAULT_SCHEMA_CLASS"] = "drf_spectacular.openapi.AutoSchema"

SPECTACULAR_SETTINGS = {
    "TITLE": "Tesis – API de Gestión de Causas",
    "VERSION": "1.0.0",
    "DESCRIPTION": "Backend DRF para causas, eventos, documentos y relaciones.",
    # Usa assets locales del sidecar (evita CDN/firewalls)
    "SWAGGER_UI_DIST": "SIDECAR",
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
}

CORS_ORIGIN_ALLOW_ALL = True


from datetime import timedelta

JWT_SECRET_KEY= env('JWT_SECRET_KEY')

SIMPLE_JWT = {
#    'USER_ID_FIELD': 'cuit',  # Cambia a 'cuit' para usarlo como identificador de usuario
 #   'USER_ID_CLAIM': 'cuit',  # Configura 'cuit' en el claim del token
    'AUTH_HEADER_TYPES': ('Bearer',),  # Tipo de encabezado usado para los tokens JWT
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'JTI_CLAIM': 'jti',
    'BLACKLIST_AFTER_ROTATION': True,
    'BLACKLIST_TOKEN_LIFETIME': timedelta(seconds=1),
    'SIGNING_KEY': JWT_SECRET_KEY,
    # Agrega otras configuraciones de Simple JWT según tus necesidades
}


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # O el proveedor de tu correo
EMAIL_PORT = env('EMAILPORT')
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

STORAGE = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    }
}

# === IA / NLP Settings ===

# HF Inference API
HF_API_TOKEN = os.getenv("HF_API_TOKEN", "")
HF_API_URL = os.getenv("HF_API_URL", "https://api-inference.huggingface.co/models/google/mt5-base")

# Ollama
OLLAMA_BASE_URL = os.getenv("OLLAMA_BASE_URL", "http://localhost:11434")
OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "llama3.1:8b")

# Límite de caracteres que se pasan al modelo
NLP_MAX_AGGREGATED_CHARS = int(os.getenv("NLP_MAX_AGGREGATED_CHARS", 30000))


from celery import Celery

# Indica a Celery qué settings usar
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "tesis_api.settings")

app = Celery("tesis_api")

# Configuración desde settings.py con prefijo CELERY_
app.config_from_object("django.conf:settings", namespace="CELERY")

# Auto-descubre tasks en las apps (ej: ia/tasks.py)
app.autodiscover_tasks()

# Configuración Celery en modo "eager" (sin broker)
CELERY_BROKER_URL = "memory://"
CELERY_RESULT_BACKEND = "cache+memory://"

# Fuerza ejecución inmediata
CELERY_TASK_ALWAYS_EAGER = True
CELERY_TASK_EAGER_PROPAGATES = True
# === IA: proveedor LOCAL por defecto (no usa internet) ===
SUMMARIZER_PROVIDER = os.getenv("SUMMARIZER_PROVIDER", "LOCAL")  # LOCAL | HF | OLLAMA
FALLBACK_MODEL_ID = os.getenv("FALLBACK_MODEL_ID", "google/mt5-base")  # mT5 multilenguaje
NLP_MAX_AGGREGATED_CHARS = int(os.getenv("NLP_MAX_AGGREGATED_CHARS", 30000))

# En dev podemos esperar a la task para ver la respuesta inmediata
NLP_SYNC_IN_DEV = os.getenv("NLP_SYNC_IN_DEV", "true").lower() == "true"

# Idioma (podés usar "es-AR" o "es-ES")
LT_LANG = os.getenv("LT_LANG", "es-AR")

# En dev podés esperar la task
NLP_SYNC_IN_DEV = os.getenv("NLP_SYNC_IN_DEV", "true").lower() == "true"

# === IA: proveedor GPT (OpenAI o Azure) ===

GPT_PROVIDER = os.getenv("GPT_PROVIDER", "openai")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

AZURE_OPENAI_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_API_KEY = os.getenv("AZURE_OPENAI_API_KEY")
AZURE_OPENAI_API_VERSION = os.getenv("AZURE_OPENAI_API_VERSION", "2024-10-21-preview")

GPT_SUMMARIZER_MODEL = os.getenv("GPT_SUMMARIZER_MODEL", "gpt-4o")
GPT_VERIFIER_MODEL   = os.getenv("GPT_VERIFIER_MODEL", "gpt-4o-mini")

SUMMARY_MAX_TOKENS = int(os.getenv("SUMMARY_MAX_TOKENS", "900"))
VERIFIER_MAX_TOKENS = int(os.getenv("VERIFIER_MAX_TOKENS", "600"))

GPT_GRAMMAR_MODEL = os.getenv("GPT_GRAMMAR_MODEL", "gpt-4o-mini")
GRAMMAR_MAX_TOKENS = int(os.getenv("GRAMMAR_MAX_TOKENS", "800"))
GRAMMAR_MAX_LINES_PER_PAGE = int(os.getenv("GRAMMAR_MAX_LINES_PER_PAGE", "400"))